on:
  push:
   branches:
     - master
     - staging
     - develop

name: Continuous integration

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --all --tags
      
      - name: Setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Check Release Version
        uses: thebongy/version-check@v1
        with:
          file: package.json
        id: version_check

      - name: Install dependencies
        run: npm ci

      - name: Linting and Test
        run: npm run test:prod

      - name: Run Build
        run: npm run build

      - name: Create tarball
        run: npm pack

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: juno-node-${{ steps.version_check.outputs.releaseVersion }}
          path: ./juno-node-${{ steps.version_check.outputs.rawVersion }}.tgz

  # Publish release on push to master
  release-master:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --all --tags

      - name: Check Release Version
        id: version_check
        uses: thebongy/version-check@v1
        with:
          file: package.json
          tagFormat: v${version}
      
      - name: Setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Publish Release
        id: create_release
        uses: actions/create-release@latest
        with:
          tag_name: ${{ steps.version_check.outputs.releaseVersion }}
          release_name: juno-node-${{ steps.version_check.outputs.releaseVersion }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: juno-node-${{ steps.version_check.outputs.rawVersion }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: juno-node-${{ steps.version_check.outputs.rawVersion }}.tgz
          asset_name: juno-node-${{ steps.version_check.outputs.releaseVersion }}.tgz
          asset_content_type: application/tgz

      - name: Publish to npm
        run: npm publish juno-node-${{ steps.version_check.outputs.rawVersion }}.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  release-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --all --tags

      - name: Check Release Version
        id: version_check
        uses: thebongy/version-check@v1
        with:
          file: package.json
          tagFormat: v${version}-beta

      - name: Setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: juno-node-${{ steps.version_check.outputs.releaseVersion }}

      - name: Publish Release
        id: create_release
        uses: actions/create-release@latest
        with:
          tag_name: ${{ steps.version_check.outputs.releaseVersion }}
          release_name: juno-node-${{ steps.version_check.outputs.releaseVersion }}
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: juno-node-${{ steps.version_check.outputs.rawVersion }}.tgz
          asset_name: juno-node-${{ steps.version_check.outputs.releaseVersion }}.tgz
          asset_content_type: application/gzip

      - name: Publish to npm
        run: npm publish juno-node-${{ steps.version_check.outputs.rawVersion }}.tgz --tag beta
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
